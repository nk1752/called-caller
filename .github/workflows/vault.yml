name: vault

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  # Use docker.io for Docker Hub if empty
  RENEW: true
  ID: 1
  NAME: "rashida"
  BG: "blue"
  ENV: "dev"
  VAULT_ADDR: "https://nk1752-cluster-public-vault-55c83db1.9e78ed07.z1.hashicorp.cloud:8200"
  VAULT_NAMESPACE: "admin"

jobs:
  Variables:
    runs-on: ubuntu-latest
    permissions:
      contents: read # read|write|none
      id-token: write # read|write|none

    steps:
      # - name: pull secrets from vault
      #   id: vault
      #   uses: hashicorp/vault-action@v3.0.0
      #   with:
      #     url: "${{ secrets.VAULT_ADDR }}"
      #     token: "${{ secrets.VAULT_TOKEN }}"
      #     namespace: "admin"
      #     secrets: |
      #       secret/data/poc/secret1 nadeem | nadeem

      - name: checkout repo
        uses: actions/checkout@v3.0.0

      - uses: eLco/setup-vault@v1
        with:
          vault_version: "1.12.0"

      - name: login to vault using approle
        id: login
        run: |
          curl -s -H "X-Vault-Namespace: ${{env.VAULT_NAMESPACE}}" \
            --request POST --data '{"role_id": "48b28a05-6cb2-359c-80f5-4f39548c3eb0", "secret_id": "24a18eea-e494-2f19-6816-2305eb114a63"}' \
            ${{env.VAULT_ADDR}}/v1/auth/approle/login > vault_token.json

          jq . vault_token.json

          echo "CLIENT_TOKEN=$(jq -r '.auth.client_token' vault_token.json)" >> $GITHUB_OUTPUT

      - name: write secret using API"
        run: |
          curl \
            --request POST \
            --header "X-Vault-Token: ${{steps.login.outputs.CLIENT_TOKEN}}" \
            --header "X-Vault-Namespace: admin" \
            --header "Content-Type: application/json" \
            --data @payload_login.json \
            ${{env.VAULT_ADDR}}/v1/secret/data/yaml1 | jq -r ".data"

      # - name: read secrets using approle
      #   run: |
      #     echo CLIENT_TOKEN -> ${{ steps.login.outputs.CLIENT_TOKEN }}

      #     curl -s \
      #         -H "X-Vault-Token: ${{ steps.login.outputs.CLIENT_TOKEN }}" \
      #         -H "X-Vault-Namespace: ${{env.VAULT_NAMESPACE}}" \
      #         ${{env.VAULT_ADDR}}/v1/secret/data/yaml1 | jq -r ".data"


